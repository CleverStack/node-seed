{
  // Settings
  "node": true,
  "maxerr": 100,            // Maximum error before stopping.
  "passfail": false,        // Stop on first error.
  "smarttabs": false,       // Suppress warnings about mixed tabs and spaces when the latter are used for alignmnent only

  // Predefined globals whom JSHint will ignore.
  "globals": {
    "console": true,
    "process": true,
    "spyOn": false,
    "it": false,
    "describe": false,
    "beforeEach": false,
    "afterEach": false,
    "before": false,
    "after": false,
    "waits": false,
    "waitsFor": false,
    "runs": false
  },
  "predef": [
    "-Promise"
  ],

  // Development
  "debug": false,           // Allow debugger statements e.g. browser breakpoints.
  "devel": false,           // Allow developments statements e.g. `console.log();`.

  // EcmaScript 5
  "esnext": true,           // Allow ECMAScript 6 specific syntax
  "strict": false,          // Don't require `use strict` pragma  in every file.
  "globalstrict": true,     // Allow global "use strict" (also enables 'strict').

  // Bug prevention
  "asi": false,             // Tolerate Automatic Semicolon Insertion (no semicolons).
  "laxbreak": false,        // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
  "laxcomma": true,         // Tolerate comma first
  "bitwise": true,          // Prohibit bitwise operators (&, |, ^, etc.).
  "boss": false,            // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
  "curly": true,            // Require {} for every new block or scope.
  "eqeqeq": true,           // Require triple equals i.e. `===`.
  "eqnull": false,          // Tolerate use of `== null`.
  "evil": false,            // Tolerate use of `eval`.
  "expr": true,             // Tolerate `ExpressionStatement` as Programs.
  "forin": false,           // Tolerate `for in` loops without `hasOwnPrototype`.
  "immed": true,            // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
  "latedef": true,          // Prohibit variable use before definition.
  "loopfunc": false,        // Allow functions to be defined within loops.
  "maxdepth": 5,            // Max number of block nesting levels
  "maxparams": false,       // Max number of formal parameters allowed per function
  "multistr": false,        // Suppress warnings about multi-line strings
  "noarg": true,            // Prohibit use of `arguments.caller` and `arguments.callee`.
  "regexp": true,           // Prohibit `.` and `[^...]` in regular expressions.
  "shadow": false,          // Allows re-define variables later in code e.g. `var x=1; x=2;`.
  "supernew": false,        // Tolerate `new function () { ... };` and `new Object;`.
  "undef": true,            // Require all non-global variables be declared before they are used.
  "unused": true,           // Warn when variable is defined but never used
  "validthis": true,

  // Styling prefrences.
  "quotmark": "single",     // Enforce the consistency of quotation marks
  "camelcase": true,        // Force all variable names to use either camelCase style or UPPER_CASE with underscores
  "indent": 2,              // Enforce specific tab width
  "newcap": true,           // Require capitalization of all constructor functions e.g. `new F()`.
  "noempty": false,         // Prohibit use of empty blocks.
  "nonew": true,            // Prohibit use of constructors for side-effects.
  "nomen": false,           // Prohibit use of initial or trailing underscores in names.
  "onevar": false,          // Allow only one `var` statement per function.
  "plusplus": false,        // Prohibit use of `++` & `--`.
  "sub": false,             // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
  "trailing": true,         // Prohibit trailing whitespaces.
  "white": false            // Enforce Douglas Crockford's JavaScript coding style for white space
}
